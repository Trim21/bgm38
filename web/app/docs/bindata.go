// Code generated for package docs by go-bindata DO NOT EDIT. (@generated)
// sources:
// docs/swagger.json
// docs/swagger.yaml
package docs

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _swaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5f\x6f\xdc\x44\x10\x7f\xef\xa7\x58\x19\xa4\xbe\x54\xf6\xe5\x28\x12\x8a\x84\x04\x94\x50\x9d\xa0\x69\xd4\x94\xbe\xd0\xea\xb4\x67\xcf\xf9\xb6\xb2\x77\xcd\xee\xfa\xd2\x28\x8a\x84\x10\x7f\x52\xa1\x12\x90\x52\x22\x4a\x28\xe5\x21\x34\xaa\x20\xe9\x4b\x51\x48\x53\xf2\x65\xce\xbe\xf4\x5b\xa0\xdd\xf3\xe5\xfe\xd8\x67\x7c\xc9\x85\x22\x68\x9f\x1a\xef\xec\x6f\xe7\x37\x33\x3b\xbf\x9d\x5b\x3a\x83\x10\x42\x86\xb0\x1b\xe0\x83\x30\xa6\xd1\x47\xfa\x83\xfe\xd8\x90\x32\x10\x86\xfe\xfb\xc6\xb9\xc4\x6e\x01\xbb\x2e\x70\x63\x1a\x19\x65\xb3\x64\x24\x5f\x09\xad\x33\x63\x1a\x2d\xf5\xb6\x3a\x20\x6c\x4e\x02\x49\x18\x55\xb6\x6f\xa3\x79\x90\x88\xd5\x91\x82\x44\x38\x20\xa8\xce\x38\xaa\x61\xea\x86\x3e\x31\x13\x18\xbd\x51\x12\xe9\x81\xda\x52\x73\xfd\xd7\xde\xd0\xa6\x02\x78\x13\xf8\x80\x11\x70\x5f\x5c\xae\xcf\x03\x6f\x12\x5b\x5b\xcf\xb2\xfe\x75\x9b\x51\x89\x6d\x39\xe0\x92\x5e\xa0\xd8\xd7\xe6\x57\x39\xf1\xcb\x53\x7d\x5b\xf4\x6a\xc8\x3d\xb5\xa8\x69\x4f\x5b\x96\x4b\x64\x23\xac\x99\x36\xf3\xad\x6c\x7b\xf0\x31\xd1\x3b\xc8\x5b\x52\x1b\x98\x3e\x18\x47\x26\xcb\x7d\x0e\x79\xc4\x06\x2a\x60\xb4\x43\x97\x2a\x57\xc7\xf5\xc6\xd2\x11\xb2\x6a\x1e\xab\x59\x0e\x34\xad\x0f\x2a\x17\x66\x66\xe7\x67\xb2\x1d\x68\x02\x17\x49\x2e\x4a\x66\xc9\x9c\xea\x58\x25\x16\x46\x83\x09\x15\x2c\x03\x07\xc4\xd4\xa8\xea\x98\x6e\x72\x6b\x58\xc0\x1c\x96\x0d\x65\x60\x75\x3f\x06\x58\x36\xc4\x60\xca\x95\x3f\xa6\x6c\x5a\xcd\x29\xcb\xc6\x1e\x50\x07\x73\x6b\x29\x14\xc0\xab\xc4\x59\x4e\x33\x77\x21\x9d\x9f\xac\xd2\x89\x1f\xfc\x11\xdf\xd9\x8e\x36\xb6\xda\x1b\x5f\xb5\xef\x7d\xd6\xbe\xfb\x28\xba\xfd\xb0\xbd\xf6\x53\xbc\xf2\x0d\xb1\x45\xfc\x60\x3f\xda\x5f\x8d\xd7\x37\xa3\xaf\xbf\xb8\x4e\xa3\x5f\x3e\x8d\xef\x6f\xc4\x4f\x56\x0f\x1f\xae\x44\xdf\x6f\x1d\x6e\x1f\x3c\x5f\xdf\x8e\xd7\x7f\x6f\xed\xdf\x3b\x3c\x58\x8b\x7e\xb8\xdf\xde\xdb\x89\xbf\xfb\x32\xde\xf8\x35\xbe\xfb\x38\xbe\xb3\x7d\x9d\x46\x1b\x5b\xad\x67\x07\xed\xb5\xad\x0e\x04\x0e\x82\x68\x67\x3f\xfa\x7c\xb3\x7f\x53\x67\xa9\xb3\x63\x28\x49\x9d\x58\x70\xe6\x84\xf6\xd0\xe5\x19\xb0\x90\x70\x4b\x1e\x05\x25\x03\x42\x1b\xe1\x20\xf0\x88\x8d\x15\x6f\xeb\xa6\x60\xd4\x48\x99\xdd\xc8\x38\x5c\x84\xbe\x8f\xf9\xa2\x8a\x94\x0b\x14\x38\x96\x80\x30\xea\x9e\x85\xea\x9c\xf9\x68\x01\x4b\xbb\x41\xa8\x8b\x6c\xe6\x79\x60\xeb\xc8\x66\x40\xb1\x40\x6d\x27\x8c\x56\x1c\x05\xd7\xdd\x75\x21\xc1\xba\x36\x5c\xff\x49\x21\x70\xec\x83\x04\x3e\x9a\x7e\x3a\xc7\xbd\xc0\x2c\x06\xba\xfc\x85\xe4\x84\xba\x23\x22\x83\x32\xaa\x22\xa9\xab\x73\x28\x5a\xdd\x69\x3d\xdd\x54\x69\xdc\x7d\xd4\xda\xdb\x6b\xed\x3e\x7d\xfe\xf3\x13\x55\x27\xcf\xbe\x8d\x7e\xfc\xa4\xb5\xfb\x5b\x7c\xfb\xcf\x68\xe5\x71\x1e\x74\xf7\x0e\x26\x98\x79\xa6\x44\x1f\xae\x8a\x3f\xcf\x8a\xc3\xc7\x21\xe1\xa0\xa2\x28\x79\x08\x99\x86\xcb\x85\xb2\xcb\x41\x04\x8c\x0a\x10\x99\x57\x45\x9b\x94\x4b\xa5\x91\x8b\x28\x23\x72\x45\x6a\x11\x1d\x49\x02\xce\xc5\x46\x19\x39\x1c\x69\x9c\x66\x8c\x06\x9b\xd4\x00\xea\xf9\xd2\xf9\xb1\x68\xcd\x32\x89\xde\x63\x21\xcd\x4d\x5f\x51\x4a\xaf\x72\xa8\x2b\xd0\x57\x2c\x07\xea\x84\x12\x75\x88\xb0\x38\x08\x73\x86\x73\xc6\x27\xc6\xb1\x5c\x1e\x8b\xe3\x87\x34\xe0\xcc\x06\x21\x70\xcd\x03\x34\x43\x25\x91\x8b\xa7\x4b\xf7\x1a\xf6\x88\xa3\x7b\xc2\x44\x89\xbf\x5e\x1a\x8f\xf8\x3b\xd8\x41\x17\xb1\x84\x05\x7c\xca\x7c\x8f\xc7\x32\xf5\x75\xf0\xcb\x72\xa6\x22\x1f\xc9\x65\xd9\x6a\x12\x58\xa8\x92\xc0\x12\x61\xed\x26\xd8\xd2\x5a\x4a\xfe\x73\x32\xe1\xbc\x08\x12\x71\xf0\xb0\x04\x07\xcd\x77\x00\x05\xc2\xd4\x41\xb2\x01\x84\x77\x96\x14\xf1\xe3\x49\xda\x04\xd4\x4a\xa2\x84\x67\xcf\x17\xe4\xe3\xa0\x80\x34\xa9\x80\x55\xe6\x4e\x4f\x8e\x08\x95\xe0\x42\x6e\x77\x1c\x7e\xe0\xda\x36\x0b\xa9\x44\x95\x77\x8b\x28\x4d\x2f\xbf\xff\x71\xb1\xb9\xfc\xfe\xe9\xdd\x57\x55\x04\x24\x30\x93\x58\x5e\xc2\xc1\x15\x10\x2f\xd5\x67\x0c\x8e\xff\x5f\xf5\x19\xaf\x88\x2b\x54\x02\xa7\xd8\x43\xf3\x7a\x10\x45\x1d\x67\xfe\x85\x89\x2e\xae\x43\x03\xd3\x5f\xdf\xe1\x83\x13\x5d\xcf\x93\x94\x08\x75\x3b\x25\xd3\x97\x6f\x78\x74\x0d\xb8\x6a\xd8\x92\x8c\x68\x25\x86\xaf\xaa\xc8\x4d\x8f\xc3\x29\xf8\xdc\xb9\xc0\x80\x5b\xd8\x0f\x3a\xbf\x16\xb8\x4c\x22\x8c\x40\x39\x8b\x08\x4d\x7e\x32\x40\xe9\x08\x66\xd4\x84\x21\x24\x96\x61\x4e\xd3\x1b\xdb\x19\xc8\xce\x5e\x91\x57\x41\x56\xd9\x4f\x38\xf8\x75\x02\x9e\x53\x4d\xa4\x68\x52\x94\xfb\x14\xad\x50\xcc\x27\x5f\x01\xa2\xc1\x42\xcf\x41\x35\x35\xfe\x76\xf5\xfb\x58\x29\x48\x74\x05\x9c\x0c\xf7\x4e\x18\x7a\xe2\x14\x26\x5c\x2c\x8a\x38\xf8\x7b\xc0\xd1\xc1\xc8\x7c\x03\x74\x5e\x62\x93\xf5\x53\xb0\x90\xdb\x05\x92\x3d\x96\xab\x12\xf3\x51\x4f\xe1\x82\xa0\xc5\x8b\x81\x32\xe7\x85\x14\xc3\x58\x01\x21\x7e\xee\x8d\x1a\x52\xb5\x37\xd1\x59\x0f\x13\x6a\x26\x63\x08\xf1\x5d\x8b\xb2\x2a\xb1\x19\xad\x26\x97\xd9\x0c\xa8\x7b\x76\xd4\xcd\x3b\x4e\x19\xa4\x7e\x26\xce\x44\xcc\x8c\xe6\x91\x15\x76\x1c\x2d\x55\xd8\x9b\xcb\x8f\x6f\x0a\x17\x73\x9e\x3f\x3e\x12\x09\x7e\x3e\x56\x21\xe6\xdd\x7f\x85\x45\xfa\x1f\xb9\xd8\x63\xf5\xfb\xc2\x88\x55\x7b\xd2\x9d\xa2\xa7\x23\x93\xe5\xdf\x05\x4e\x36\x1f\xd7\xe5\xe2\x2d\xa3\x37\x97\x4c\xba\x71\x28\x65\x2a\xf0\x5c\xc9\xab\xf7\x02\xb5\x9e\x3f\x75\x69\x75\x3c\x41\x81\xab\x86\xfa\xa2\x39\xe8\xa6\x7e\xd2\x97\x74\x5e\xe2\xaf\x64\x50\x3c\x61\xee\x1d\x2c\x47\x0f\x16\x05\x5b\x68\xc1\x71\xfa\x74\x1e\x72\x13\x7d\x91\x8f\x2f\xed\x9d\xc1\xe7\xcc\xf2\x5f\x01\x00\x00\xff\xff\xa5\x3c\x4c\x71\xf7\x1c\x00\x00")

func swaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerJson,
		"swagger.json",
	)
}

func swaggerJson() (*asset, error) {
	bytes, err := swaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger.json", size: 7415, mode: os.FileMode(438), modTime: time.Unix(1584703632, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _swaggerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\xdd\x6e\x1b\x45\x14\xbe\xf7\x53\x1c\x19\x24\xdf\x50\xaf\x63\x8a\x84\x56\x42\xa2\x94\x50\x59\xd0\x1f\x91\xd2\x5b\x6b\xbc\x7b\xbc\x9e\x6a\x77\x66\x99\x99\x75\x1a\x15\x24\x84\xf8\x49\x85\x4a\x40\x4a\x89\x28\xa1\x94\x8b\xd0\xa8\x82\xa4\x37\x45\x21\x4d\xc9\xcb\x78\xd7\xe9\x5b\xa0\xd9\x5d\xaf\x77\x6d\x67\xed\x46\xbd\xe3\xd2\x67\xe7\x7c\xe7\x3b\x3f\xdf\x99\x71\x87\x48\xbc\x46\x54\xcf\x04\xa3\x62\x63\x97\x32\xaa\x28\x67\xd2\xac\x00\x08\x94\xf5\x65\x21\xb8\xd0\x3f\x00\x7c\xc1\x7d\x14\x8a\xa2\x4c\x7e\x03\x78\x28\x25\x71\x70\xf4\x13\x00\x6f\x11\xcf\x77\xd1\x84\x9a\xc3\x15\x10\x40\xed\x0d\x94\x81\x44\xd1\x47\x01\xb5\xec\xa4\x5a\xf3\xd1\x04\xa9\x04\x65\x4e\x6a\x94\x8a\xa8\x40\xce\x00\x8b\x51\x4e\xf7\x4c\x0c\xbc\x73\x13\x2d\x95\xb2\xbe\x41\x5c\x6a\x13\x9d\x48\x29\xff\x2e\x45\xd7\x6e\x33\xe2\xcd\x4a\x41\x06\x31\x62\x9b\xda\x65\xa4\x4f\x2f\x81\xec\xf1\xc0\xb5\xa1\x83\x40\x80\x32\x85\x0e\x2e\x9e\x43\x9f\xe2\x2a\xf5\xeb\x68\x8f\x90\xa7\xb9\x53\xdb\x2c\xe5\x45\xfc\xc9\xef\x45\x12\x02\xdd\xb8\x40\xa5\x28\x92\x07\xc2\xc2\x72\x20\x45\x84\x83\xaa\xec\xcc\xec\xe4\x18\xb7\x5f\x22\xb9\x62\x4c\xea\x15\x6a\x6e\xa3\xb4\x04\xf5\xe3\x74\xe0\x1d\xa8\xb9\x84\xb2\x7a\xc7\xf1\xea\xaa\x6f\x50\xcf\x31\x18\x6f\x53\x8b\xb3\x76\xda\xd2\xba\xcf\x9c\xd2\x49\xa4\xac\xcb\xc7\xe8\xc4\xb6\x63\x4d\x10\xf7\xda\x14\xd1\xf8\xb4\x42\xaf\x60\x98\x89\x39\x36\x13\x21\xc8\xda\x44\xf8\xac\x38\x0b\xf5\xae\x38\xb1\x33\x82\xe9\x03\x6d\x6b\x4e\x6f\xb3\xf9\x2e\x0f\x36\x3a\x17\x7f\x7b\xd9\x09\x4e\x9d\x2f\x8f\x32\x9a\x6e\xb5\x9e\xf1\x5c\xf5\xa6\x8a\xf9\xba\xc0\xae\x09\xb5\xd7\x8c\xdc\x72\x32\x72\xfa\x98\x6c\x64\xbe\xba\x7a\xc4\xce\x8a\xad\x7d\x4f\xc7\x9e\x97\xed\xc7\xa3\xb8\xd3\x09\xdb\x44\x91\x31\x89\x32\x0a\x63\xb8\x49\x22\xc5\x71\x99\x5c\x41\x0b\xec\xd6\x39\x22\xed\x71\xa9\x4c\x20\x3e\xd5\x2a\x7a\xf3\xed\xba\xc5\xbd\xca\x48\x14\x16\x67\x8a\x58\xa9\xe0\xd1\x23\xd4\x35\x81\xbe\xab\x04\xf5\x9a\x4b\x75\x0f\x2b\xd9\x80\xc2\xf5\xd8\x16\x1b\x02\xe1\x9a\xd0\x53\xca\x97\xa6\x61\x38\x54\xf5\x82\x8e\x06\x35\xb2\x23\x05\x09\x5f\x80\x15\x54\xc0\xbb\xb1\x87\xa6\x01\x5d\x2e\xa0\x43\x98\x13\x78\xb4\x5e\x01\x70\xa9\x85\x4c\xa6\x29\x27\xc1\x2e\xb7\xae\x2f\x10\xc9\x88\xf3\x31\x3a\x2e\xef\x18\x36\xf6\x8d\x8f\x5a\x17\x97\xaf\xac\x2c\x57\x00\x14\x0a\x4f\x5e\xed\xae\xa0\xe8\x53\x0b\x4d\xa8\x5e\xe1\x55\x6d\xa6\x4a\x2f\xf3\xd8\x2d\x66\x92\xdc\x64\xba\xe7\x28\x64\xcc\xb6\x51\x6f\xd4\x97\x2a\x3e\x51\xbd\xb8\xc0\x46\xba\x78\xfa\x4b\x86\x45\x5c\x64\x36\x11\xc6\xed\x40\xa2\x68\x53\xfb\xf3\x84\x71\x6e\x5f\x16\xf2\xfe\xec\x5c\xd6\xa0\xe8\xe1\x3f\xd1\xdd\xbd\x70\x7b\x77\xb8\xfd\xdd\xf0\xfe\x57\xc3\x7b\x8f\xc3\x3b\x8f\x86\x9b\xbf\x45\xeb\x3f\x50\x4b\x46\x0f\x8f\xc2\xa3\x8d\x68\x6b\x27\xfc\xfe\x9b\xcc\x25\xfc\xe3\xcb\xe8\xc1\x76\xf4\x74\xe3\xe4\xd1\x7a\xf8\xf3\xee\xc9\xde\xf1\x8b\xad\xbd\x68\xeb\xef\xc1\xd1\xfd\x93\xe3\xcd\xf0\x97\x07\xc3\xc3\xfd\xe8\xa7\x6f\xa3\xed\x3f\xa3\x7b\x4f\xa2\xbb\x7b\x63\xc7\xed\xdd\xc1\xf3\xe3\xe1\xe6\x6e\x02\x48\x7c\x3f\xdc\x3f\x0a\xbf\xde\xc9\xfb\x26\x9f\x0a\x8e\x7a\xb0\xe3\x2b\xa4\x65\x9b\xb0\x4a\x94\xd5\xa3\xcc\xb9\x98\xa6\x7c\x63\x29\x3d\xe5\x13\x41\x3c\x54\x28\xb2\xe9\x3b\x57\x4c\x3a\x2d\xcd\x1b\x10\x6e\xec\x0f\x9e\xed\x68\x32\x07\x8f\x07\x87\x87\x83\x83\x67\x2f\x7e\x7f\xaa\x73\x7f\xfe\x63\xf8\xeb\x17\x83\x83\xbf\xa2\x3b\xff\x86\xeb\x4f\xc6\x72\x66\x26\xe8\xaa\x67\x86\x64\x10\x52\xbc\xcc\x2a\xf0\xd3\x80\x0a\xb4\x4d\x50\x22\xc0\x32\x91\xf8\x82\xdb\x81\x85\x39\xa2\x0a\x6f\xa9\xac\x8b\x99\x95\xf8\xbe\x4b\xad\x38\x75\xe3\xa6\xe4\x2c\xbb\x51\xa5\xcf\x99\xcc\x6f\x9c\x6a\xb3\xd1\xa8\xe6\x37\x4e\x21\xf3\x59\xe8\xb1\x58\xad\x1e\x7a\x64\x81\x1b\xa5\x7a\xbe\x71\xfe\x74\xf8\x2b\x5c\xc1\x07\x3c\x60\xf6\x1c\xe8\x99\x2b\x28\x7b\xfb\xd5\x72\xd1\x9a\xcd\xd3\xa3\x7d\xc2\x7c\xc1\x2d\xbd\x8a\x3a\x2e\xc2\x32\x53\x54\xad\x9d\x35\xf0\xc4\xf3\x2d\x47\xe1\xad\x46\x09\x85\xf7\x88\x0d\x97\x88\xc2\x55\x72\xe6\xc8\x85\x78\x32\xf0\x3c\x22\xd6\x4c\x70\x90\xe9\x51\xd7\x2f\xb9\x51\xbb\xa0\x2b\xb8\x97\x4d\x3d\x58\xdc\x75\xd1\xd2\x38\xf9\x0d\xd0\x8c\x37\x79\x9b\xfa\x46\xba\xca\x8d\xdb\xe3\x5b\x77\xce\x2e\xb8\x84\x2a\x79\xa3\xa1\x0d\x2b\x89\x93\x04\xc2\x6c\x50\x3d\xa4\x22\x7b\xbe\xc9\x59\x62\xd4\x51\x5b\xd7\x16\x15\xe0\x05\xcb\xe2\x01\x53\xd0\x7a\x7f\x9e\xb4\x66\x3c\x89\x4b\xd5\x55\x7c\x48\x4c\xcb\xeb\x55\x09\xe9\xea\x87\x67\xe9\xf7\xac\x4b\xbb\xf6\xbf\xd6\x56\x49\x89\x5b\x4c\xa1\x60\xc4\x85\x95\xe4\x9f\xdc\x72\xe1\x3f\xd9\x2b\x52\x99\x1a\x4d\xd8\x78\xbc\xf5\x63\xb8\x12\x83\xeb\x71\x38\x97\xdc\xec\x15\xb9\x4a\x1c\x07\x85\x09\xd5\x66\xbd\x51\xad\xfc\x17\x00\x00\xff\xff\xdb\x79\xe2\x80\xc4\x0e\x00\x00")

func swaggerYamlBytes() ([]byte, error) {
	return bindataRead(
		_swaggerYaml,
		"swagger.yaml",
	)
}

func swaggerYaml() (*asset, error) {
	bytes, err := swaggerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger.yaml", size: 3780, mode: os.FileMode(438), modTime: time.Unix(1584703632, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"swagger.json": swaggerJson,
	"swagger.yaml": swaggerYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"swagger.json": &bintree{swaggerJson, map[string]*bintree{}},
	"swagger.yaml": &bintree{swaggerYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
