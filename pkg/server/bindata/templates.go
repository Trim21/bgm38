// Code generated for package bindata by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/base/head.tmpl
// templates/index.tmpl
// templates/login.tmpl
// templates/vote/create.tmpl
// templates/vote/index.tmpl
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBaseHeadTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x93\x5f\x8b\x13\x31\x14\xc5\xdf\x17\xfa\x1d\x42\x9e\x3b\xc9\x56\x17\x11\x99\x94\x8a\xe0\xb3\x0f\x2e\xf8\x9a\x26\x77\x3b\x77\xcc\xbf\xcd\xbd\xd3\xb5\x0c\xf3\xdd\xc5\x8e\xdd\x3a\xa2\x88\x3e\x98\x97\x90\x73\x12\xce\x8f\x73\x49\xdb\x81\xf5\xdb\xd5\xcd\xea\x46\x08\x21\xda\x08\x6c\x85\xeb\x6c\x25\x60\x23\xef\x3f\xbe\x6f\x5e\xcb\xed\x8f\x5e\xb2\x11\x8c\x3c\x22\x3c\x95\x5c\x59\xce\xd6\xbc\x5c\x4e\x0c\x89\x8d\x7c\x42\xcf\x9d\xf1\x70\x44\x07\xcd\xf9\xb0\x16\x03\x41\x6d\xc8\xd9\x60\xf7\x01\x4c\xca\x6b\x81\x09\x19\x6d\x38\x8b\x60\x36\xea\x76\x2d\xa2\xfd\x82\x71\x88\x0b\x09\xd3\x52\x5a\xe2\x74\xcc\xa5\x81\xc7\x01\x8f\x46\x7e\x6a\xee\xdf\x36\xef\x72\x2c\x96\x71\x1f\x40\x5e\x81\x10\x0c\xf8\x03\x3c\x3f\x65\xe4\x00\xdb\x71\x14\xf8\x20\x94\x98\xa6\x71\xbc\x6c\x10\x08\xc4\x34\x7d\xb0\x07\x18\x47\x48\x7e\x9a\x5a\x3d\xdf\x7e\xae\x28\x60\xfa\x2c\x2a\x04\x23\x89\x4f\x01\xa8\x03\x58\xf6\xd0\x55\x78\x30\xf2\x1b\x19\xbd\xd1\xda\xf9\xa4\x7a\xf2\x10\xf0\x58\x55\x02\xd6\xa9\x44\xbd\xcf\x99\x89\xab\x2d\xbb\x3b\x75\xa7\x36\xda\x23\xb1\x76\x44\x57\x43\x45\x4c\xca\x11\x2d\x1b\xae\x99\x28\x57\x3c\x60\x32\xd2\xa6\x9c\x4e\x31\x0f\x24\xaf\x6c\xe4\x2a\x16\x16\x54\xdd\x1f\x00\xfa\xc7\x01\xea\x69\xf7\x52\xbd\xb8\xa4\xcf\xca\x39\xb6\x5f\xa6\xfe\x3e\xb7\xd5\x73\xe0\xf6\x6f\xe3\x4b\x2e\x05\xaa\xea\x69\xb7\x51\x9b\x57\xea\x76\x46\x18\xa2\xbf\x38\xff\x07\xe3\x97\x63\xe8\x7f\x9e\xc2\xbf\x70\xac\x6e\x5a\xfd\xfd\x67\x7d\x0d\x00\x00\xff\xff\x53\xfd\x41\x51\x62\x03\x00\x00")

func templatesBaseHeadTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesBaseHeadTmpl,
		"templates/base/head.tmpl",
	)
}

func templatesBaseHeadTmpl() (*asset, error) {
	bytes, err := templatesBaseHeadTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/base/head.tmpl", size: 866, mode: os.FileMode(438), modTime: time.Unix(1575459001, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIndexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x4f\xd1\x0a\x83\x30\x0c\x7c\x17\xfc\x87\x5b\xdf\x9d\x3f\xa0\xfe\x4b\x6d\xc3\x2a\xc4\x46\x34\xe8\x9c\xf8\xef\xa3\x60\x99\x2c\x2f\x77\xe4\xb8\x4b\xae\x79\x78\x71\xba\x4f\x84\xa0\x23\x77\x65\xd1\x24\x04\xdb\xf8\x6a\xcd\x27\x54\x2e\x9a\xae\x2c\x8e\x03\x4a\xe3\xc4\x56\x09\xa6\xb7\x0b\xd5\x81\xac\x7f\xea\x38\xb1\x81\x09\x14\xc8\xe0\x3c\xcb\xa2\xe9\xc5\xef\x29\xc4\x0f\x2b\x1c\xdb\x65\x69\x8d\x93\xa8\x76\x88\x34\xa7\x20\x00\xb8\x8b\xb3\x6c\x79\xfd\x2f\x39\x61\x28\xbd\xb5\x72\x14\xf5\xe7\xce\x13\x88\x59\xb0\xc9\xcc\xfe\xe6\xaf\xfd\xb0\xe6\x33\x17\xcf\x98\x58\x7e\xaf\xbe\xca\x7e\x03\x00\x00\xff\xff\x30\x2d\x03\x48\xfe\x00\x00\x00")

func templatesIndexTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexTmpl,
		"templates/index.tmpl",
	)
}

func templatesIndexTmpl() (*asset, error) {
	bytes, err := templatesIndexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.tmpl", size: 254, mode: os.FileMode(438), modTime: time.Unix(1575461337, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLoginTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\xbd\x8e\xd3\x40\x10\xee\x23\xe5\x1d\xe6\xb6\xdf\x58\x80\x44\x65\x47\x42\x34\x54\xe8\x24\xb8\x07\x58\xdb\x13\x7b\xc5\xfe\x69\x77\x9c\x10\x22\x4b\xd4\x48\x3c\x00\xd2\x51\xd0\x51\xf2\x52\xe1\x39\xd0\xfa\xec\x3b\x27\xe7\x1c\x10\x5d\x71\x69\xb2\xb6\xbf\xf9\xe6\xfb\xbe\x59\x7b\xd3\x8b\xd2\x16\xb4\x75\x08\x35\x69\xb5\x9c\xcf\xd2\xf8\x0f\x4a\x98\x2a\x63\x9f\x6a\x5e\x18\xb6\x9c\xcf\x76\x3b\x20\xd4\x4e\x09\x42\x60\xb9\x08\x98\xd4\x28\xca\x05\x69\xa7\x18\xb0\x1a\x6b\x64\xd0\xb6\xf3\x59\x9a\xdb\x72\x1b\x49\x4a\xb9\x86\x42\x89\x10\x32\x56\x58\x43\x42\x1a\xf4\x91\x08\x00\x60\xfc\xd0\xdb\x0d\x10\x7e\x24\x5e\xa0\xa1\x3b\xc8\x31\xac\xb0\x8a\x2d\x77\x3b\x58\xbc\x2a\x48\x5a\xf3\x56\x68\x84\xb6\x4d\x93\x52\xae\x07\xd2\xf1\xfa\xb0\xc1\x03\xa4\x5c\x55\xfc\x25\xd8\xd5\x2a\x20\xc5\xf5\x0b\x88\x37\x75\xc9\x9f\x3d\x1f\xcb\x82\x31\x45\x47\x73\xc1\x79\x68\x9c\xf3\x18\x02\xbc\x21\xad\xae\xcc\x07\x63\x37\xe6\xbd\xf0\x15\x12\x70\x7e\x8c\x5f\x59\xaf\x41\x74\xe2\x33\x96\x28\x5b\x49\xc3\x40\x23\xd5\xb6\xcc\x98\xb3\x81\x62\x87\xc3\x9a\x63\xb9\x91\x82\x57\xde\x36\xee\x58\xcd\x2d\x5a\x89\x1c\xd5\xf2\xf7\xf5\xd7\xfd\x97\x1f\xfb\x6f\x3f\xf7\xd7\xbf\xf6\xdf\x3f\x4f\x63\x3b\xbc\x34\xae\x21\x88\xd3\xcf\x58\xb4\xcb\x0e\x7a\xc5\xc1\x79\xab\x18\x18\xa1\x31\x63\x01\xfd\x1a\x3d\x3b\x4d\xd7\xff\xd6\x42\x35\x98\xb1\x38\xad\xd7\xd6\xac\x64\xb5\x78\xd7\x55\x42\xdb\x9e\x14\x9e\xdc\x28\x9f\x08\xa0\x1f\xeb\x23\x45\xd3\x04\xf4\xd1\xcd\x7f\x65\x72\x63\x7f\x28\x9d\xce\xe8\x8c\x54\xae\x7a\xc2\xa7\x90\x8b\x13\x21\x6c\xac\x2f\xff\x31\x97\x01\x3e\x64\x73\x7b\xfd\xd7\x18\x26\xf7\xd7\xfd\x6c\x2e\x7b\xc2\xa7\x90\x4d\xd8\x9a\x02\x9c\xa0\xfa\x8c\x4d\x13\x6b\x2f\x05\xd5\xe7\x05\x73\xce\xab\xd6\x37\x7c\xec\xe0\x4e\x95\xdc\x73\x1f\x9a\x5c\x4b\x7a\x58\x7a\xef\x35\x27\x03\x39\x19\xee\xbc\xd4\xc2\x6f\xe1\xc0\xfb\xa4\xbc\x29\x15\x69\x12\xeb\xc6\x9f\xf8\x89\x53\xe1\xce\x59\x9a\x0c\x47\x54\xd2\x1d\x78\x7f\x02\x00\x00\xff\xff\xf6\xa1\x8c\x48\x00\x07\x00\x00")

func templatesLoginTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesLoginTmpl,
		"templates/login.tmpl",
	)
}

func templatesLoginTmpl() (*asset, error) {
	bytes, err := templatesLoginTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/login.tmpl", size: 1792, mode: os.FileMode(438), modTime: time.Unix(1558294214, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVoteCreateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x5b\x8b\x1c\x45\x14\x7e\x5f\xd8\xff\x50\x96\x79\xd8\xc5\xed\xee\x8c\x06\x11\x77\x6a\xd8\x64\x89\xc6\x27\x5f\x8c\xf8\x98\x9a\xae\x33\xdb\x35\xa9\x5b\xaa\x4e\x4f\x76\x1c\x16\x04\xd1\xe0\x12\x48\x10\x14\x03\x82\xab\xa8\xe8\x83\xe4\x51\x93\xe0\xbf\xd9\x99\xb8\xff\x42\xba\x7b\x66\xa7\x7b\x2e\xb9\x28\xa4\x1f\x86\xae\x73\xa9\xf3\x9d\xdb\x37\x3d\x1a\x11\x01\x3d\x69\x80\xd0\x81\x45\x48\x52\x0f\x1c\x21\x46\xed\x14\x25\x47\x47\x9b\x1b\x84\x10\xd2\x7e\x4d\xd8\x14\x87\x0e\x48\x86\x5a\x75\xa6\xc2\xe2\x9d\x28\x6e\x0e\x18\xfd\x34\x8b\x52\x6d\xa2\x6b\xdc\x04\x7a\xae\x06\x2e\xa6\xef\xe5\x59\x03\x72\x92\x66\xdc\x07\x40\x46\xaf\x7f\xf4\x5e\xf4\x0e\x5d\xd2\x1b\xae\x81\xd1\x81\x84\xdb\xce\x7a\xa4\x73\x75\xf5\xa4\xd6\x20\x18\x64\xf4\xb6\x14\x98\x31\x01\x03\x99\x42\x54\x1e\x76\x48\x1e\xc0\x47\x21\xe5\x8a\x77\x15\x30\x63\x77\x88\x34\x12\x25\x57\xa5\x10\x58\x2b\xbe\xb8\x43\x34\x3f\x94\x3a\xd7\x0d\x91\x34\x4d\xd1\x32\xac\x0c\xd1\x45\x70\x2b\x97\x03\x46\x3f\x89\xae\x5f\x8e\xf6\xad\x76\x1c\x65\x57\x01\x9d\x83\x92\xc0\x40\x1c\x40\xc3\x1d\x25\x2a\xe8\xec\x97\x55\x25\x97\xc9\xc7\x16\xa1\x9d\x54\xc2\xcd\x8d\x9a\x9d\x92\xe6\x26\xf1\xa0\x18\x0d\x38\x54\x10\x32\x80\xe5\xf4\x33\x0f\x3d\x46\x0b\x30\xe1\xdd\x24\x49\x85\x89\xfb\x41\x80\x92\x03\x1f\x1b\xc0\xc4\x38\x9d\x74\xad\xc5\x80\x9e\xbb\xbd\x4b\xf1\xa5\xb8\x95\x08\x19\x30\x49\x43\x98\x2b\x62\x2d\x4d\x9c\x86\xb0\x5c\x5c\x6f\x43\xb0\x5e\x1e\x48\xc3\x28\x37\xd6\x0c\xb5\xcd\xcb\x7e\xce\x90\xb6\x93\x5a\x53\xdb\x5d\x2b\x86\xb3\x77\x21\x07\x24\x55\x3c\x04\x46\x8b\x72\x70\x69\xc0\xd3\x66\x86\x3d\xeb\x35\xe1\x29\x4a\x6b\x18\x8d\xa7\x83\x46\x89\x06\xcc\xac\x60\xd4\xd9\x80\xf5\xca\x2d\x5e\x5b\xb8\x47\x07\xde\xe6\x6e\xd1\xaa\xaa\x1f\xef\x82\x22\x3d\xeb\x19\x85\x43\xae\x9d\x82\x0f\x8c\xcb\xf1\xaa\xe6\x52\xb5\x68\x67\x72\x72\xe7\xec\xa7\xef\xda\x49\x69\xf6\x1c\xff\xb2\x3b\xb4\x33\x33\x6e\xcb\xe2\xa2\x06\x8c\x22\x45\x6f\xd5\x52\x05\x5f\xe4\x91\x62\x16\x61\x3a\xec\xd3\x70\x2b\x30\x05\xcd\x95\x9a\x3b\x5c\x03\xe5\x68\x03\x07\xc2\x21\x92\xe2\x27\xd2\x39\x82\x58\x75\x49\xf1\x9c\xfe\x7d\x72\xfa\xe8\x87\xf1\xbd\x87\xa7\x4f\x7e\x79\xfa\xcd\x83\xa7\xbf\x3f\xde\x21\x93\xe3\xe3\xaa\x26\xe3\xaf\xef\xfe\xf3\xf0\xd7\xc9\xe7\x5f\x8c\xbf\x7c\x30\xfe\xfe\xb7\xf1\x5f\xdf\x8e\xff\xb8\x7f\x76\xe7\xee\x0a\x3c\x49\x09\x68\xb1\x47\x89\x90\x83\x45\x59\xe6\x6b\x53\x73\x2e\xed\xe6\x88\xd6\x94\x09\x71\x21\x3e\x74\xc5\x28\x5c\x41\x43\x49\x41\x2d\x8c\x56\xea\xf3\x0c\xbb\x68\x48\x17\x4d\xe4\xbc\xd4\xdc\x0f\xd7\x14\xdb\x9a\x54\xc9\xf4\x66\xed\xc6\xad\xed\x55\x75\x98\xfc\xf9\x64\x7c\x7c\x72\xf6\xd9\x57\x67\x3f\x3e\x5a\x4c\xa0\x0a\xbc\x32\x87\x55\xf8\x2b\xb4\x21\xef\x6a\x89\x6b\xd1\x76\x26\xf7\xee\x9f\x3e\xfe\x79\xc5\xe5\xed\xa4\xe8\x5d\x67\xbe\x53\x55\xfd\xa6\xa7\x90\x7a\xe9\x90\x04\x9f\x3e\x67\xd1\xfb\xb7\x72\xf0\xc3\xbd\xb7\xe2\x37\x67\x5b\x5e\x49\xca\xf5\xee\x2f\x6e\xf7\xba\xdd\x6e\x27\x55\xc0\xce\xcb\x86\x77\xd6\x39\xf0\x71\x3f\xec\xb5\xe2\xd6\xdb\xf1\xc5\x0a\x42\xae\xc5\x4c\xf3\x6a\x60\xac\xa4\xbb\xfe\x22\xdb\xfd\x4f\x1c\xb5\xe6\x0d\xb8\x27\xb6\x1c\xb3\xb0\x6f\x73\x83\x84\x91\xd6\x6e\x7d\xd0\x7b\xb9\x29\x29\x8e\xd4\xe6\x91\x8c\x9a\xd1\x2f\x6c\xdd\xf8\x6f\xcc\x56\x58\xbe\x5f\x18\x96\xdc\x76\x61\x54\x47\x72\x44\x3b\x57\x2b\xe2\x23\x0b\x8a\x67\xb0\x5e\x45\x6d\xd5\x40\x17\x3c\x42\x5f\x8e\xe6\x8a\x4d\x7e\x36\xa6\xb5\xae\x4e\xf1\x14\x32\xab\x04\x78\x46\x67\xc0\x2b\x38\x35\xd5\x7a\xff\x8a\x3b\xa7\xc1\xe8\xe6\xc6\x0b\xb0\xd2\x8d\xed\x58\x9a\x00\x1e\xaf\x40\xcf\x7a\xd8\xa2\xaf\x37\x58\x68\x7b\xb7\x69\xde\x68\xf3\x1b\x55\x9f\xeb\x7a\x0f\x98\x7b\x43\x7a\x5c\x05\x98\x6b\x8e\xea\xc3\x50\x9b\x81\xdd\xd9\xb6\x37\x07\x2c\xa9\xff\x89\x26\xd3\xaf\xab\xd1\x88\x80\x11\xe5\xd7\xd7\xbf\x01\x00\x00\xff\xff\x2f\xf0\xc5\x27\x9f\x09\x00\x00")

func templatesVoteCreateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesVoteCreateTmpl,
		"templates/vote/create.tmpl",
	)
}

func templatesVoteCreateTmpl() (*asset, error) {
	bytes, err := templatesVoteCreateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vote/create.tmpl", size: 2463, mode: os.FileMode(438), modTime: time.Unix(1575458625, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVoteIndexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\xc1\x6a\xf3\x30\x10\x84\xef\x81\xbc\xc3\xfe\x3a\x47\xd1\xdf\xe6\xd2\x83\x64\x28\x85\xd2\x07\x48\xa0\xd7\x8d\xb4\xd8\x0b\x92\xec\x5a\x1b\xa7\x69\xc8\xbb\x17\xc7\x6e\x8b\x75\x59\xcd\x37\x23\x31\x48\xf6\x5f\x68\xbd\x5c\x3a\x82\x46\x52\xac\xd6\x2b\x3b\x4e\x88\x98\x6b\xa7\xbe\x1a\xed\x53\xd6\x6f\x98\x8b\xba\x5b\x84\xa1\x5a\xaf\x00\x00\x6c\x22\x41\xf0\x0d\xf6\x85\xc4\xa9\xc3\xfe\x55\x3f\xa9\x85\x97\x31\x91\x53\x03\xd3\xb9\x6b\x7b\x51\x93\x35\x2d\xdf\x66\xa1\x2c\x4e\x9d\x39\x48\xe3\x02\x0d\xec\x49\xdf\xc5\x06\x4e\x85\x7a\x5d\x3c\x46\x3c\x46\x72\xb9\xdd\x00\x67\x16\xc6\x78\x87\xe4\x1e\xb6\xff\x37\x90\xf0\x93\xd3\x29\x2d\x10\xe7\x25\x5a\xd6\x69\x44\x3a\x4d\x1f\x27\x1e\x9c\x7a\xd7\x87\x67\xfd\xd2\xa6\x0e\x85\x8f\x91\xd4\x5f\x21\x26\x47\xa1\xa6\xdf\xa3\xc2\x12\xa9\xba\x5e\x61\xbb\x1f\x77\x70\xbb\x59\x33\xb1\xf5\xca\x9a\xf9\x3d\xec\xb1\x0d\x97\x71\x76\x55\x11\xec\xc5\x9a\x6e\x54\x9c\x6a\x28\xbd\x77\x6a\x6b\xca\x50\x9b\xc7\xdd\x4e\x01\x46\x71\x4a\x4d\x59\xca\x61\x4e\x9a\x9f\x0b\xcc\xfc\x09\xdf\x01\x00\x00\xff\xff\x7c\x28\x98\x26\x96\x01\x00\x00")

func templatesVoteIndexTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesVoteIndexTmpl,
		"templates/vote/index.tmpl",
	)
}

func templatesVoteIndexTmpl() (*asset, error) {
	bytes, err := templatesVoteIndexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vote/index.tmpl", size: 406, mode: os.FileMode(438), modTime: time.Unix(1575460388, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/base/head.tmpl":   templatesBaseHeadTmpl,
	"templates/index.tmpl":       templatesIndexTmpl,
	"templates/login.tmpl":       templatesLoginTmpl,
	"templates/vote/create.tmpl": templatesVoteCreateTmpl,
	"templates/vote/index.tmpl":  templatesVoteIndexTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"base": &bintree{nil, map[string]*bintree{
			"head.tmpl": &bintree{templatesBaseHeadTmpl, map[string]*bintree{}},
		}},
		"index.tmpl": &bintree{templatesIndexTmpl, map[string]*bintree{}},
		"login.tmpl": &bintree{templatesLoginTmpl, map[string]*bintree{}},
		"vote": &bintree{nil, map[string]*bintree{
			"create.tmpl": &bintree{templatesVoteCreateTmpl, map[string]*bintree{}},
			"index.tmpl":  &bintree{templatesVoteIndexTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
