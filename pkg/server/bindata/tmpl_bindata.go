// Code generated by go-bindata. DO NOT EDIT.
// sources:
// bindata\templates\base\head.tmpl
// bindata\templates\index.tmpl
// bindata\templates\login.tmpl
// bindata\templates\vote\index.tmpl

package bindata


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataBindatatemplatesbaseheadtmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x41\x6b\xe3\x30\x10\x85\xef\x81\xfc\x87\x41\xe7\xc8\xda\x90\xcb" +
	"\x1e\x2c\xc3\xb2\xd0\x73\x0f\x0d\xf4\xaa\xc8\x93\x78\x52\x49\x76\x34\xe3\xa4\xc1\xf8\xbf\x17\xe2\x26\xad\x7b\xa9" +
	"\x2e\x42\x6f\xde\xc7\x7b\x68\xca\x06\x5d\x5d\x2d\x17\xcb\x05\x00\x40\x19\x51\x1c\xf8\xc6\x65\x46\xb1\x6a\xfb\xf2" +
	"\xa4\xff\xaa\xea\xfb\x2c\xb9\x88\x56\x9d\x09\x2f\x5d\x9b\x45\x4d\xa3\xe9\xf8\x36\x09\x26\xb1\xea\x42\xb5\x34\xb6" +
	"\xc6\x33\x79\xd4\xb7\xc7\x0a\x7a\xc6\xac\xd9\xbb\xe0\x76\x01\x6d\x6a\x57\x40\x89\x84\x5c\xb8\x89\x68\xd7\xc5\x9f" +
	"\x15\x44\xf7\x4e\xb1\x8f\x33\x89\xd2\x5c\x9a\xd7\x69\x44\x3a\x8d\xa7\x9e\xce\x56\xbd\xea\xed\x3f\xfd\xbf\x8d\x9d" +
	"\x13\xda\x05\x54\x5f\x85\x08\x2d\xd6\x07\x7c\xa0\x42\x12\xb0\x1a\x06\xa0\x3d\x14\x30\x8e\xc3\x70\xbf\x30\x30\xc2" +
	"\x38\x3e\xbb\x03\x0e\x03\xa6\x7a\x1c\x4b\x33\xb9\x1f\x5f\x14\x28\xbd\x41\xc6\x60\x15\xcb\x35\x20\x37\x88\xa2\xa0" +
	"\xc9\xb8\xb7\x86\xc5\x09\x79\xe3\x99\xcd\xae\x6d\x85\x25\xbb\xae\x88\x94\x0a\xcf\x7c\x0f\x67\x9f\xa9\x13\xe0\xec" +
	"\xad\xba\x03\x47\x36\xc7\x53\x8f\xf9\xaa\x37\xc5\xa6\x58\xdf\x90\x23\xab\xaa\x34\x93\xfb\x17\x76\x9e\xf5\x03\x5c" +
	"\x2e\x4a\xf3\xb9\xe4\x8f\x00\x00\x00\xff\xff\x7d\x79\xaa\x96\xed\x01\x00\x00")

func bindataBindatatemplatesbaseheadtmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataBindatatemplatesbaseheadtmpl,
		"bindata/templates/base/head.tmpl",
	)
}



func bindataBindatatemplatesbaseheadtmpl() (*asset, error) {
	bytes, err := bindataBindatatemplatesbaseheadtmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "bindata/templates/base/head.tmpl",
		size: 493,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1555681055, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataBindatatemplatesindextmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x4f\xd1\x0a\x83\x30\x0c\x7c\x17\xfc\x87\x5b\xdf\x9d\x3f\xa0\xfe\x4b" +
	"\x6d\xc3\x2a\xc4\x46\x34\xe8\x9c\xf8\xef\xa3\x63\x65\xb2\xbc\xdc\x91\xe3\x2e\xb9\xe6\xe6\xc5\xe9\x3e\x11\x82\x8e" +
	"\xdc\x95\x45\x93\x10\x6c\xe3\xa3\x35\xaf\x50\xb9\x68\xba\xb2\x38\x0e\x28\x8d\x13\x5b\x25\x98\xde\x2e\x54\x07\xb2" +
	"\xfe\xae\xe3\xc4\x06\x26\x50\x20\x83\xf3\x2c\x8b\xa6\x17\xbf\xa7\x10\x3f\xac\x70\x6c\x97\xa5\x35\x4e\xa2\xda\x21" +
	"\xd2\x9c\x82\x00\xe0\x2a\xce\xb2\xe5\xf5\xbf\xe4\x84\xa1\xf4\xd4\xca\x51\xd4\x9f\x3b\x4f\x20\x66\xc1\x26\x33\xfb" +
	"\x8b\xbf\xf6\xc3\x9a\xcf\x7c\x79\xc6\xc4\xf2\x7b\xf5\xa7\xec\x3b\x00\x00\xff\xff\x59\xeb\x71\x75\xfc\x00\x00\x00" +
	"")

func bindataBindatatemplatesindextmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataBindatatemplatesindextmpl,
		"bindata/templates/index.tmpl",
	)
}



func bindataBindatatemplatesindextmpl() (*asset, error) {
	bytes, err := bindataBindatatemplatesindextmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "bindata/templates/index.tmpl",
		size: 252,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1565186697, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataBindatatemplateslogintmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\xbd\x8e\xd3\x40\x10\xee\x23\xe5\x1d\xe6\xb6\xdf\x58\x80\x44\x65" +
	"\x47\x42\x34\x54\xe8\x24\xb8\x07\x58\xdb\x13\x7b\xc5\xfe\x69\x77\x9c\x10\x22\x4b\xd4\x48\x3c\x00\xd2\x51\xd0\x51" +
	"\xf2\x52\xe1\x39\xd0\xfa\xec\x3b\x27\xe7\x1c\x10\x5d\x71\x69\xb2\xb6\xbf\xf9\xe6\xfb\xbe\x59\x7b\xd3\x8b\xd2\x16" +
	"\xb4\x75\x08\x35\x69\xb5\x9c\xcf\xd2\xf8\x0f\x4a\x98\x2a\x63\x9f\x6a\x5e\x18\xb6\x9c\xcf\x76\x3b\x20\xd4\x4e\x09" +
	"\x42\x60\xb9\x08\x98\xd4\x28\xca\x05\x69\xa7\x18\xb0\x1a\x6b\x64\xd0\xb6\xf3\x59\x9a\xdb\x72\x1b\x49\x4a\xb9\x86" +
	"\x42\x89\x10\x32\x56\x58\x43\x42\x1a\xf4\x91\x08\x00\x60\xfc\xd0\xdb\x0d\x10\x7e\x24\x5e\xa0\xa1\x3b\xc8\x31\xac" +
	"\xb0\x8a\x2d\x77\x3b\x58\xbc\x2a\x48\x5a\xf3\x56\x68\x84\xb6\x4d\x93\x52\xae\x07\xd2\xf1\xfa\xb0\xc1\x03\xa4\x5c" +
	"\x55\xfc\x25\xd8\xd5\x2a\x20\xc5\xf5\x0b\x88\x37\x75\xc9\x9f\x3d\x1f\xcb\x82\x31\x45\x47\x73\xc1\x79\x68\x9c\xf3" +
	"\x18\x02\xbc\x21\xad\xae\xcc\x07\x63\x37\xe6\xbd\xf0\x15\x12\x70\x7e\x8c\x5f\x59\xaf\x41\x74\xe2\x33\x96\x28\x5b" +
	"\x49\xc3\x40\x23\xd5\xb6\xcc\x98\xb3\x81\x62\x87\xc3\x9a\x63\xb9\x91\x82\x57\xde\x36\xee\x58\xcd\x2d\x5a\x89\x1c" +
	"\xd5\xf2\xf7\xf5\xd7\xfd\x97\x1f\xfb\x6f\x3f\xf7\xd7\xbf\xf6\xdf\x3f\x4f\x63\x3b\xbc\x34\xae\x21\x88\xd3\xcf\x58" +
	"\xb4\xcb\x0e\x7a\xc5\xc1\x79\xab\x18\x18\xa1\x31\x63\x01\xfd\x1a\x3d\x3b\x4d\xd7\xff\xd6\x42\x35\x98\xb1\x38\xad" +
	"\xd7\xd6\xac\x64\xb5\x78\xd7\x55\x42\xdb\x9e\x14\x9e\xdc\x28\x9f\x08\xa0\x1f\xeb\x23\x45\xd3\x04\xf4\xd1\xcd\x7f" +
	"\x65\x72\x63\x7f\x28\x9d\xce\xe8\x8c\x54\xae\x7a\xc2\xa7\x90\x8b\x13\x21\x6c\xac\x2f\xff\x31\x97\x01\x3e\x64\x73" +
	"\x7b\xfd\xd7\x18\x26\xf7\xd7\xfd\x6c\x2e\x7b\xc2\xa7\x90\x4d\xd8\x9a\x02\x9c\xa0\xfa\x8c\x4d\x13\x6b\x2f\x05\xd5" +
	"\xe7\x05\x73\xce\xab\xd6\x37\x7c\xec\xe0\x4e\x95\xdc\x73\x1f\x9a\x5c\x4b\x7a\x58\x7a\xef\x35\x27\x03\x39\x19\xee" +
	"\xbc\xd4\xc2\x6f\xe1\xc0\xfb\xa4\xbc\x29\x15\x69\x12\xeb\xc6\x9f\xf8\x89\x53\xe1\xce\x59\x9a\x0c\x47\x54\xd2\x1d" +
	"\x78\x7f\x02\x00\x00\xff\xff\xf6\xa1\x8c\x48\x00\x07\x00\x00")

func bindataBindatatemplateslogintmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataBindatatemplateslogintmpl,
		"bindata/templates/login.tmpl",
	)
}



func bindataBindatatemplateslogintmpl() (*asset, error) {
	bytes, err := bindataBindatatemplateslogintmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "bindata/templates/login.tmpl",
		size: 1792,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1558294214, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataBindatatemplatesvoteindextmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x91\x4f\x6b\x02\x41\x0c\xc5\xef\x82\xdf\x21\x9d\xb3\xb3\xb6\xb7\x1e" +
	"\x1c\xa1\x14\x4a\x2f\xbd\x29\xf4\x3a\xee\xbc\xba\x81\xf9\xb3\x75\xe3\xaa\x1d\xf6\xbb\x97\xfd\x43\xad\x98\xd3\xcb" +
	"\xef\x25\x10\xf2\x72\x26\x87\x2f\x8e\x20\xd5\x26\xc1\x92\xa3\xc3\xb9\x90\x50\x7b\x45\x5d\x37\x9f\xcd\x67\x44\x44" +
	"\xab\x07\x97\x4a\xb9\xd4\xa0\x4a\x82\x5f\x4f\xb0\xd7\xe4\x6d\xdc\x1b\xf5\x53\xe9\x32\x44\xfd\x6e\x63\xa3\xfe\x6c" +
	"\x58\x37\xe9\xa1\x0f\x10\x4b\x65\x65\x0f\x0d\xc4\xa8\xed\xe6\x4d\x3f\xab\x3b\x3f\xda\x00\xa3\x5a\xc6\xa9\x4e\x07" +
	"\x51\x57\x7b\xac\x32\x45\x41\x14\xa3\x4e\xec\xa4\x32\x0e\x2d\x97\xd0\x43\xb3\xa0\x63\x83\x83\x6e\x4a\xeb\xed\xce" +
	"\xc3\xc4\xb4\x20\x8e\x2c\x6c\xfd\x00\x61\x9e\x8a\xc7\x05\x05\x7b\xe6\x70\x0c\x37\x88\xe3\x2d\xba\x3f\xab\x12\xa9" +
	"\x35\xbe\x8f\xdc\x1a\xf5\xa9\xb7\x2f\xfa\x35\x85\xda\x0a\xef\x3c\xd4\xf5\x28\x86\x81\xdb\xe3\x66\x5d\x58\x3c\xd6" +
	"\x39\x53\xb1\xe9\x15\x75\xdd\x6a\x39\xb2\xe9\x4d\xcb\x7f\x7f\x5a\xed\x92\xbb\xac\xe7\xb3\x9c\x8b\x0f\x34\x8d\xdd" +
	"\xa3\xcf\x60\x1c\x9b\xac\x69\x67\x8c\xa1\x9f\x24\x44\x37\x44\xf5\x1b\x00\x00\xff\xff\x0d\x4c\x20\xd6\xcb\x01\x00" +
	"\x00")

func bindataBindatatemplatesvoteindextmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataBindatatemplatesvoteindextmpl,
		"bindata/templates/vote/index.tmpl",
	)
}



func bindataBindatatemplatesvoteindextmpl() (*asset, error) {
	bytes, err := bindataBindatatemplatesvoteindextmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "bindata/templates/vote/index.tmpl",
		size: 459,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1574940437, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"bindata/templates/base/head.tmpl":  bindataBindatatemplatesbaseheadtmpl,
	"bindata/templates/index.tmpl":      bindataBindatatemplatesindextmpl,
	"bindata/templates/login.tmpl":      bindataBindatatemplateslogintmpl,
	"bindata/templates/vote/index.tmpl": bindataBindatatemplatesvoteindextmpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"bindata": {Func: nil, Children: map[string]*bintree{
		"templates": {Func: nil, Children: map[string]*bintree{
			"base": {Func: nil, Children: map[string]*bintree{
				"head.tmpl": {Func: bindataBindatatemplatesbaseheadtmpl, Children: map[string]*bintree{}},
			}},
			"index.tmpl": {Func: bindataBindatatemplatesindextmpl, Children: map[string]*bintree{}},
			"login.tmpl": {Func: bindataBindatatemplateslogintmpl, Children: map[string]*bintree{}},
			"vote": {Func: nil, Children: map[string]*bintree{
				"index.tmpl": {Func: bindataBindatatemplatesvoteindextmpl, Children: map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
